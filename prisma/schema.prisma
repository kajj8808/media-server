generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  watch_records WatchRecords[]
  create_at     DateTime       @default(now())
  update_at     DateTime       @updatedAt()
}

model WatchRecords {
  id       Int   @id @default(autoincrement())
  progress Float @default(0.0)

  create_at DateTime @default(now())
  update_at DateTime @updatedAt()

  movie_id   Int
  episode_id Int

  movie   Movie?   @relation(fields: [movie_id], references: [id])
  episode Episode? @relation(fields: [episode_id], references: [id])
  User    User?    @relation(fields: [userId], references: [id])
  userId  Int?
}

model Magnet {
  id            Int       @id @default(autoincrement())
  cipher_magnet String    @unique
  create_at     DateTime  @default(now())
  update_at     DateTime  @updatedAt()
  Episode       Episode[]
}

model Movie {
  id             Int      @id @default(autoincrement())
  title          String
  description    String?
  poster         String
  thumbnail      String?
  running_time   Int?
  video_id       String
  subtitle_id    String?
  kr_description Boolean?
  is_ass         Boolean?

  create_at DateTime @default(now())
  update_at DateTime @updatedAt()

  watch_records WatchRecords[]
  Series        Series?        @relation(fields: [seriesId], references: [id])
  seriesId      Int?
}

model Episode {
  id             Int      @id @default(autoincrement())
  title          String
  description    String?
  thumbnail      String?
  running_time   Int?
  number         Float
  video_id       String
  subtitle_id    String?
  is_ass         Boolean?
  is_special     Boolean?
  kr_description Boolean?

  create_at DateTime @default(now())
  update_at DateTime @updatedAt()

  watch_records WatchRecords[]

  season_id Int
  series_id Int
  magnet_id Int

  Season Season? @relation(fields: [season_id], references: [id])
  Series Series? @relation(fields: [series_id], references: [id])
  Magnet Magnet? @relation(fields: [magnet_id], references: [id])
}

model Season {
  id          Int     @id @default(autoincrement())
  name        String
  number      Int
  auto_upload Boolean @default(false)
  nyaa_query  String?

  encoder  String?
  is_ass   Boolean?
  is_db    Boolean?
  is_4k    Boolean?
  air_date DateTime?
  poster   String?

  excluded_episode_count Int? // 제외된 에피소드 수
  included_episode_count Int? // 포함된 에피소드 수 ( 제외된 season의 episode 수 )

  create_at DateTime @default(now())
  update_at DateTime @updatedAt()

  series_id Int

  episodes             Episode[]
  series               Series?               @relation(fields: [series_id], references: [id])
  production_companies ProductionCompanies[]
}

model Series {
  id                  Int       @id
  title               String    @unique
  overview            String
  cover_image         String
  logo                String?
  poster              String?
  is_game_original    Boolean?
  is_novel_original   Boolean?
  is_manga_original   Boolean?
  homepage            String?
  next_episode_to_air DateTime?
  original_name       String?

  create_at DateTime @default(now())
  update_at DateTime @updatedAt()

  seasons  Season[]
  episodes Episode[]
  movies   Movie[]
  genres   Genres[]  @relation("SeriesGenres")
}

model Genres {
  id     Int      @id @default(autoincrement())
  name   String
  series Series[] @relation("SeriesGenres")
}

model ProductionCompanies {
  id             Int      @id
  logo_path      String
  name           String
  origin_country String
  seasons        Season[]
}
