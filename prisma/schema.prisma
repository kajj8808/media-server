generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// VideoContent의 타입 ( video )
enum VideoContentType {
  MOVIE
  EPISODE
  SPECIAL
}

// 시청 상태 
enum WatcWatchStatus {
  WATCHING // 보는 중인 경우
  COMPLETED // 모두 본 경우
  DROPPED // 보다 만 경우 
}

model User {
  id       Int     @id @default(autoincrement())
  email    String
  password String?

  /**
   * series_interactions
   */

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
}

/**
 * model SeriesInteraction {
 * id                Int                 @id @default(autoincrement())
 * user_id           Int
 * user              User                @relation(fields: [user_id], references: [id])
 * content_id        Int
 * content           Content             @relation(fields: [content_id], references: [id])
 * feeling           UserContentFeeling? // 좋아요, 싫어요, 아주 좋아요
 * status            UserContentStatus   // 시청 상태
 * want_to_watch     Boolean             @default(false) // 보고 싶은 목록
 * created_at         DateTime            @default(now())
 * updated_at         DateTime            @updatedAt()
 * }
 */

enum SeriesOriginal {
  GAME_ORIGINAL
  NOVEL_ORIGINAL
  MANGA_ORIGINAL
}

// Series의 상태
enum SeriesStatus {
  ONGOING // 방송중인 컨텐츠
  COMPLETED // 방영이 끝난 컨텐츠 + 영화인 경우 
  UPCOMING // 곧 방영 예정인 컨텐츠
  CANCELLED // 업로드가 취소된 경우 (삭제 예정인 컨텐츠)
}

model Series {
  id            Int             @id
  title         String          @unique
  overview      String
  logo          String?
  backdrop_path String?
  poster_path   String?
  original      SeriesOriginal?
  status        SeriesStatus

  genres  Genres[]
  season  Season[]
  episode Episode[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
}

model Genres {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  seriesId Int?
  series   Series? @relation(fields: [seriesId], references: [id])
}

model Season {
  id            Int       @id @default(autoincrement())
  series_id     Int?
  season_number Int
  name          String?
  overview      String?
  poster_path   String?
  air_date      DateTime?

  episodes Episode[]

  series Series? @relation(fields: [series_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
}

model Episode {
  id               Int @id @default(autoincrement())
  season_id        Int
  series_id        Int
  video_content_id Int @unique

  episode_number Int
  name           String?
  overview       String?
  still_path     String?
  runtime        Int?

  season        Season?      @relation(fields: [season_id], references: [id])
  series        Series?      @relation(fields: [series_id], references: [id])
  video_content VideoContent @relation(fields: [video_content_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
}

model Movie {
  id Int @id @default(autoincrement())

  video_content_id Int @unique

  title         String
  overview      String
  poster_path   String?
  backdrop_path String?
  runtime       Int?
  release_date  DateTime?

  video_content VideoContent @relation(fields: [video_content_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
}

model Magnet {
  id               Int @id @default(autoincrement())
  video_content_id Int @unique

  chiper_link String @unique

  video_content VideoContent @relation(fields: [video_content_id], references: [id])
}

model VideoContent {
  id Int @id @default(autoincrement())

  // Video Content 재생 정보.
  watch_id    String
  subtitle_id String
  type        VideoContentType

  // Episode, Movie, magnet...
  episode Episode?
  movie   Movie?
  magnet  Magnet?

  // 날짜 정보.
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
}
